#roomManager {
	position: absolute;
	width: 100vw;
	height: 100vh;
	height: calc(var(--vh) * 100);
	z-index: 10;
	background-color: #368a36;
	text-align: center;
}

#roomManager #mahjongHeading, #roomManager #withFriendsHeading {
	font-size: 7vh;
	font-size: calc(var(--vh) * 7);
	color: #ffbd17;
	display: inline-block;
}

#roomManager #withFriendsHeading {
	font-size: 5vh;
	font-size: calc(var(--vh) * 5);
	vertical-align: top;
	margin-left: 1.5vw;
	color: #ffe100;
}

#roomManager #roomIdInput, #roomManager #nicknameInput{
	height: 5vh;
	height: calc(var(--vh) * 5);
	width: 32vw;
	min-width: 300px;
	font-size: 3vh;
	font-size: calc(var(--vh) * 3);
	padding-left: 1vh;
	padding-left: calc(var(--vh) * 1);
}

#roomManager #nicknameInput {
	margin-top: 1vh;
	margin-top: calc(var(--vh) * 1);
}

#roomManager #joinOrCreateRoom {
	margin-top: 2vh;
	margin-top: calc(var(--vh) * 2);
}

#roomManager #joinRoom, #roomManager #createRoom{
	width: 16vw;
	min-width: 150px;
	height: 7vh;
	height: calc(var(--vh) * 7);
	border-radius: 3.5vh;
	border-radius: calc(var(--vh) * 3.5);
	font-size: 2vh;
	font-size: calc(var(--vh) * 2);
}

#roomManager #joinRoom {
	background: linear-gradient(45deg, #ffff39, #5bff5b, #609fff);
}

#roomManager #createRoom {
	margin-left: 1vw;
	background: linear-gradient(45deg, #FF6600, #FF77CC, #7777FF);
}

#roomManager #copyrightNotice {
	position: absolute;
	text-align: center;
	top: 96vh;
	top: calc(var(--vh) * 96);
	width: 100vw;
	color: #ffbd17;
}

#roomManager #inRoomContainer {
	background-color: #00000011; /*Darken the background slightly. */
	min-height: 40vh;
	min-height: calc(var(--vh) * 40);
}

#roomManager #currentRoom {
	font-size: 4vh;
	font-size: calc(var(--vh) * 4);
	margin: 0;
}

#roomManager #playerCount {
	font-size: 3vh;
	font-size: calc(var(--vh) * 3);
}

#roomManager .playerViewRow {
	text-align: left;
	padding-left: 2vw;
	padding-right: 2vw;
	background-color: #00000022; /*Darken even more.*/
	border: 2px solid #00000044;
}

#roomManager .playerViewNameSpan {
	font-size: 4vh;
	font-size: calc(var(--vh) * 4);
	width: 70%;
	display: inline-block;
}

#roomManager .playerViewIdSpan {
	font-size: 2vh;
	font-size: calc(var(--vh) * 2);
}

#roomManager .playerViewCard {
	width: 30%;
	display: inline-block;
	font-size: 3vh;
	font-size: calc(var(--vh) * 3);
	text-align: center;
}

#roomManager .playerViewKickButton {
	background: linear-gradient(45deg, #f23f3f,#eeb972);
	border-radius: 10vh;
	border-radius: calc(var(--vh) * 10);
	padding-top: 1vh;
	padding-top: calc(var(--vh) * 1);
	padding-bottom: 1vh;
	padding-bottom: calc(var(--vh) * 1);
	cursor: pointer;
}

#roomManager #startGameButton {
	width: 30vw;
	height: 5vh;
	height: calc(var(--vh) * 5);
	font-size: 3vh;
	font-size: calc(var(--vh) * 3);
	border-radius: 2.5vh;
	border-radius: calc(var(--vh) * 2.5);
	margin-left: 1vw;
	background: linear-gradient(45deg, #FF6600, #FF77CC, #7777FF);
}

#roomManager #closeRoomButton {
	width: 30vw;
	height: 5vh;
	height: calc(var(--vh) * 5);
	font-size: 3vh;
	font-size: calc(var(--vh) * 3);
	border-radius: 2.5vh;
	border-radius: calc(var(--vh) * 2.5);
	margin-left: 1vw;
	background: linear-gradient(45deg, orange, yellow, lightgreen);
}

#roomManager #leaveRoomButton {
	width: 30vw;
	height: 5vh;
	height: calc(var(--vh) * 5);
	font-size: 3vh;
	font-size: calc(var(--vh) * 3);
	border-radius: 2.5vh;
	border-radius: calc(var(--vh) * 2.5);
	background: linear-gradient(45deg, #ffff39, #5bff5b, #609fff);
}

#topHand {
	position: absolute;
	top: 0;
	left: 9.52vh;
	left: calc(var(--vh) * 9.52);
	max-height: 12vh;
	max-height: calc(var(--vh) * 12);
	width: calc(100vw - 19.04vh);
	width: calc(100vw - calc(var(--vh) * 19.04));
	text-align: center; /*Center tiles horizontally. */
	background-color: #5a3e32;
}

#leftHand {
	position: absolute;
	left: 0;
	top: 0;
	max-width: 9.52vh;
	max-width: calc(var(--vh) * 9.52);
	width: 9.52vh;
	width: calc(var(--vh) * 9.52);
	height: 100vh;
	height: calc(var(--vh) * 100);
	background-color: #4c3329;
}

#rightHand {
	position: absolute;
	right: 0;
	top: 0;
	max-width:9.52vh;
	max-width:calc(var(--vh) * 9.52);
	width: 9.52vh;
	width: calc(var(--vh) * 9.52);
	height: 100vh;
	height: calc(var(--vh) * 100);
	background-color: #4c3329;
}

/*We would use bottom, however Safari treats bottom as the bottom of the viewport, and Safari has the viewport != visible area bug.
This means that something using bottom is off the page - hence we must use top. */
#gameBoard #userHand, #gameBoard #userHandExposed, #gameBoard #tilePlacemat {
	position: absolute;
	/*bottom: 0;*/
	top: 88vh;
	top: calc(var(--vh) * 88);
	left: 9.52vh;
	left: calc(var(--vh) * 9.52);
	height:12vh;
	height:calc(var(--vh) * 12);
	max-height: 12vh;
	max-height: calc(var(--vh) * 12);
	width: calc(100vw - 19.04vh);
	width: calc(100vw - calc(var(--vh) * 19.04));
	text-align: center; /*Center tiles horizontally. */
	background-color: #7d4b37;
}

#gameBoard #userHandExposed {
	/*bottom: 12vh;*/
	/*bottom: calc(var(--vh) * 12);*/
	top: 76vh;
	top: calc(var(--vh) * 76);
	background-color: #a04622;
	text-align: left;
}

#gameBoard #tilePlacemat {
	/*bottom: 24vh;*/
	/*bottom: calc(var(--vh) * 24);*/
	top: 64vh;
	top: calc(var(--vh) * 64);
	background-color: #FFFFFF00;
}


/*Containers used on left and right hands for vertical alignment. */
#gameBoard #rightHandContainer {
	position: relative;
	top: 50%;
	transform: translateY(-50%);
}

#gameBoard #leftHandContainer {
	position: relative;
	top: 50%;
	transform: translateY(-50%);
}

/*TODO: If tiles aren't at max size and height is much greater than width, the tiles run into each other, as the negative bottoms are height based, but tiles are width bound. */
#gameBoard #topHand img {
	max-width: calc(calc(100vw - 19.04vh) / 16); /*Raised from 14 in order to allow for more tiles to fit. */
	max-width: calc(calc(100vw - calc(var(--vh) * 19.04)) / 16); /*Raised from 14 in order to allow for more tiles to fit. */
	margin-left: calc(calc(100vw - 19.04vh) / 17 / -10); /*Negative margin of 10%. Allows even more tiles to fit. */
	margin-left: calc(calc(100vw - calc(var(--vh) * 19.04)) / 17 / -10); /*Negative margin of 10%. Allows even more tiles to fit. */
	max-height: 12vh;
	max-height: calc(var(--vh) * 12);
	/*transform: rotate(180deg);*/ /*Rotate tiles 180 degrees away from the viewer (they would be across from this person)*/
}

/*Note: Currently leftHand and rightHand tiles are facing 180 degrees away from where they would in a real game, however this probably makes it easier to read the tiles. */
#gameBoard #leftHand img {
	transform: rotate(270deg);
	max-width: 9.52vh;
	max-width: calc(var(--vh) * 9.52);
	max-height: 9vh;
	max-height: calc(var(--vh) * 9);
	padding-left: 2.38vh; /*Otherwise it is transformed partially off the screen. */
	padding-left: calc(var(--vh) * 2.38); /*Otherwise it is transformed partially off the screen. */
	margin-bottom: -3.4vh; /*It seems like the elements height does not reflect the fact that it has been transformed. Negative margin to remove some of this. */
	margin-bottom: calc(var(--vh) * -3.4); /*It seems like the elements height does not reflect the fact that it has been transformed. Negative margin to remove some of this. */
}

#gameBoard #rightHand img {
	transform: rotate(90deg);
	max-width: 9.52vh;
	max-width: calc(var(--vh) * 9.52);
	max-height: 9vh;
	max-height: calc(var(--vh) * 9);
	padding-left: 2.38vh; /*Otherwise it is transformed partially off the screen. */
	padding-left: calc(var(--vh) * 2.38); /*Otherwise it is transformed partially off the screen. */
	margin-top: -2.38vh; /*It seems like the elements height does not reflect the fact that it has been transformed. Negative margin to remove some of this. */
	margin-top: calc(var(--vh) * -2.38); /*It seems like the elements height does not reflect the fact that it has been transformed. Negative margin to remove some of this. */
	margin-bottom: -1.02vh;
	margin-bottom: calc(var(--vh) * -1.02);
}

#gameBoard #userHand img, #gameBoard #userHandExposed img, #gameBoard #tilePlacemat img {
	max-width: calc(calc(100vw - 19.04vh) / 14);
	max-width: calc(calc(100vw - calc(var(--vh) * 19.04)) / 14);
	max-height: 12vh;
	max-height: calc(var(--vh) * 12);
}

@keyframes handTurnPulse {
  0% {
    filter: brightness(1);
  }
  25% {
    filter: brightness(0.7);
  }
  50% {
	  filter: brightness(1);
  }
  75% {
	  filter: brightness(1.3);
  }
  100% {
	filter: brightness(1);
  }
}

.brightnessPulse {
	animation: handTurnPulse 3s infinite;
}

#gameBoard #tilePlacemat img {
	margin-right: 20px;
	border-radius: calc(calc(100vw - calc(var(--vh) * 19.04)) / 14 / 12); /*border radius 1/12th the width of a tile. TODO: This should be analyzed later to make sure it works right*/
}

@keyframes discardSlotPulse {
  0% {
    background-color: #3D003F99;
  }
  50% {
    background-color: #FF4136B0;
  }
  100% {
	background-color: #3D003F99;
  }
}

#gameBoard #tilePlacemat img.pending {
	animation: discardSlotPulse 5s infinite;
}

#gameBoard #compass {
	position: absolute;
	right: 9.52vh;
	right: calc(var(--vh) * 9.52);
	top: 12vh;
	top: calc(var(--vh) * 12);
	width: 12vw;
	height: 12vw;
	max-width: 12vh;
	max-width: calc(var(--vh) * 12);
	max-height: 12vh;
	max-height: calc(var(--vh) * 12);
	margin-right: 2vw;
	margin-top: 2vh;
	margin-top: calc(var(--vh) * 2);
}

#gameBoard #bottomNametag {
	position: absolute;
	margin: 0;
	min-width: 12vw;
	text-align: center;
	right: 9.52vh;
	right: calc(var(--vh) * 9.52);
	top: 26vh;
	top: calc(var(--vh) * 26);
}

#gameBoard #leftNametag {
	position: absolute;
	margin: 0;
	text-align: center;
	min-width: 12vh;
	min-width: calc(var(--vh) * 12);
	font-size: 1.2vw;
	transform: rotate(270deg);
	right: calc(9.52vh + 8vw);
	right: calc(calc(var(--vh) * 9.52) + 8vw);
	top: 19vh;
	top: calc(var(--vh) * 19);
}

#gameBoard #topNametag {
	position: absolute;
	margin: 0;
	min-width: 12vw;
	text-align: center;
	right: 9.52vh;
	right: calc(var(--vh) * 9.52);
	top: 12vh;
	top: calc(var(--vh) * 12);
}

#gameBoard #rightNametag {
	position: absolute;
	margin: 0;
	text-align: center;
	min-width: 12vh;
	min-width: calc(var(--vh) * 12);
	font-size: 1.2vw;
	transform: rotate(90deg);
	right: 4.52vh;
	right: calc(var(--vh) * 4.52);
	top: 19vh;
	top: calc(var(--vh) * 19);
}

/*The max number of tiles should be 91. Therefore, we will prepare for tiles 31 by 3. The last two spots will be filled by a count of the tiles in the wall.  */
#gameBoard #wall {
	position: absolute;
	left: 9.52vh;
	left: calc(var(--vh) * 9.52);
	top: 12vh;
	top: calc(var(--vh) * 12);
	margin-left: 1vw;
	margin-top: 1vh;
	margin-top: calc(var(--vh) * 1);
	max-width: 50vw;
	max-height: 10vh;
	max-height: calc(var(--vh) * 10);
}

#gameBoard #wall * {
	max-width: calc(50vw / 31);
	max-height: 3.33vh;
	max-height: calc(var(--vh) * 3.33);
}

#gameBoard #wall p {
	display: inline-block;
	margin: 0;
	font-size: 2.5vh;
	font-size: calc(var(--vh) * 2.5);
	vertical-align: top;
	width: calc(50vw / 31);
	text-align: center;
}

#gameBoard #discardPile {
	position: absolute;
	left: 9.52vh;
	left: calc(var(--vh) * 9.52);
	top: 22vh;
	top: calc(var(--vh) * 22);
	margin-left: 3vw;
	margin-top: 8vh;
	margin-top: calc(var(--vh) * 8);
	max-width: 60vw;
	max-height: 30vh;
	max-height: calc(var(--vh) * 30);
}

#gameBoard #discardPile * {
	max-width: calc(60vw / 23);
	max-height: 7.5vh;
	max-height: calc(var(--vh) * 7.5);
}

/*Since we have to use top instead of bottom due to viewport bugs, this can be floating above where it should be. */
#gameBoard #fullscreenControls {
	position: absolute;
	right: 9.52vh;
	right: calc(var(--vh) * 9.52);
	top: 71vh;
	top: calc(var(--vh) * 71);
	max-height: 5vh;
	max-height: calc(var(--vh) * 5);
	max-width: 5vw;
	z-index: 1;
}

#gameBoard #placeTilesButton {
	position: absolute;
	right: calc(9.52vh + 12vw);
	right: calc(calc(var(--vh) * 9.52) + 12vw);
	top: 64vh;
	top: calc(var(--vh) * 64);
	width: 10vw;
	height: 5vh;
	height: calc(var(--vh) * 5);
	border-radius: 50vh;
	border-radius: calc(var(--vh) * 50);
	font-size: 1.6vh;
	font-size: calc(var(--vh) * 1.6);
}

#gameBoard #nextTurnButton {
	position: absolute;
	right: calc(9.52vh + 12vw);
	right: calc(calc(var(--vh) * 9.52) + 12vw);
	top: 70vh;
	top: calc(var(--vh) * 70);
	width: 10vw;
	height: 5vh;
	height: calc(var(--vh) * 5);
	border-radius: 50vh;
	border-radius: calc(var(--vh) * 50);
	font-size: 1.6vh;
	font-size: calc(var(--vh) * 1.6);
}

#gameBoard #placeTilesButton:disabled, #gameBoard #nextTurnButton:disabled {
	opacity: 0.5;
	cursor: not-allowed;
}

#gameBoard {
	position: absolute;
	width: 100vw;
	height: 100vh;
	height: calc(var(--vh) * 100);
	background-color: #09790944;
}

#errorPopupCover {
	position: absolute;
	width: 100vw;
	height: 100vh;
	height: calc(var(--vh) * 100);
	background-color: #000000aa;
	z-index: 100;
}

#errorPopup {
	position: absolute;
	top: 30vh;
	top: calc(var(--vh) * 30);
	left: 35vw;
	width: 30vw;
	min-height: 25vh;
	min-height: calc(var(--vh) * 25);
	background-color: #368a36;
	border: 5px solid #ffbd17;
	border-radius: 1vh;
	border-radius: calc(var(--vh) * 1);
	text-align: center;
}

#errorPopup #errorText {
	font-size: 4.5vh;
	font-size: calc(var(--vh) * 4.5);
	color: #ffe100;
	margin-block-start: 2.25vh;
	margin-block-start: calc(var(--vh) * 2.25);
	margin-block-end: 2.25vh;
	margin-block-end: calc(var(--vh) * 2.25);
}

#errorPopup #messageText {
	font-size: 2.5vh;
	font-size: calc(var(--vh) * 2.5);
	color: white;
}

#errorPopup #dismissButton {
	width: 10vw;
	height: 5vh;
	height: calc(var(--vh) * 5);
	border-radius: 2.5vh;
	border-radius: calc(var(--vh) * 2.5);
	font-size: 2vh;
	font-size: calc(var(--vh) * 2);
	margin-top: 2vh;
	margin-top: calc(var(--vh) * 2);
	margin-bottom: 1.5vh;
	margin-bottom: calc(var(--vh) * 1.5);
	background: linear-gradient(45deg, orange, yellow, lightgreen);
	border: 2px solid black;
}


#notificationBar {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	z-index: 99; /*Below errorPopupCover*/
	background-color: #ffbd17;
	text-align: center;
	font-size: 16px;
}





:root {
	--vh: 1vh;
	/*
	While viewport relative units work fine on desktop, some mobile browsers will not show the entire viewport, due to the url bar.
	See https://nicolas-hoizey.com/articles/2015/02/18/viewport-height-is-taller-than-the-visible-part-of-the-document-in-some-mobile-browsers/

	To counteract this, we will use a CSS variable that will be dynamically changed by JavaScript.
	In order to convert vh to use the relative variable, use the following two find and replace regexp. (note: make sure that every single declaration ends in a semicolon)

	Find and replace (-)?([\d.]+)vh with calc(var(--vh) * $1$2)
	*/
}

html, body {
	width: 100vw;
	height: 100vh;
	height: calc(var(--vh) * 100);
	margin: 0;
	padding: 0;
}
