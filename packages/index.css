#roomManager {
	position: absolute;
	width: 100vw;
	width: calc(var(--vw) * 100);
	min-height: 100vh;
	min-height: calc(var(--vh) * 100);
	z-index: 10;
	background-color: #26a221;
	text-align: center;
	padding-left: calc(100vw * var(--shiftPercentageLeft) * var(--counterTranslationScaling));
	padding-left: calc(calc(var(--vw) * 100) * var(--shiftPercentageLeft) * var(--counterTranslationScaling));
	padding-right: calc(100vw * var(--shiftPercentageRight) * var(--counterTranslationScaling));
	padding-right: calc(calc(var(--vw) * 100) * var(--shiftPercentageRight) * var(--counterTranslationScaling));
	transform: translateX(calc(-100vw * var(--shiftPercentageLeft) * var(--counterTranslationScaling)));
	transform: translateX(calc(calc(var(--vw) * -100) * var(--shiftPercentageLeft) * var(--counterTranslationScaling)));
}

#roomManager #mahjongHeading, #roomManager #fourFriendsHeading {
	font-size: 3em;
	color: #ffbd17;
	display: inline-block;
}

#roomManager #fourFriendsHeading {
	font-size: 2.2em;
	vertical-align: top;
	margin-left: 0.5em;
	font-style: italic;
	color: #ffe100;
}

#selectChineseMahjong, #selectAmericanMahjong {
	border-radius: 250000px;
	font-size: 1.5em;
	padding: 5px 20px 5px 20px;
}

#selectChineseMahjong:disabled::before, #selectAmericanMahjong:disabled::before {
	content: "âœ“";
}

#roomManager #roomIdInput, #roomManager #nicknameInput{
	width: 32vw;
	width: calc(var(--vw) * 32);
	min-width: 550px;
	max-width: 100vw;
	max-width: calc(var(--vw) * 100);
	font-size: 2.5em;
	padding: 5px;
}

#roomManager #supportInfo {
	font-size: 1.5em;
}

#roomManager #nicknameInput {
	margin-top: 1vh;
	margin-top: calc(var(--vh) * 1);
}

#roomManager #joinOrCreateRoom {
	margin-top: 2vh;
	margin-top: calc(var(--vh) * 2);
}

#joinRoom, #createRoom, #singlePlayerGame, #offlineSinglePlayer, #uploadSaveButton {
	min-width: 150px;
	border-radius: 3.5vh;
	border-radius: calc(var(--vh) * 3.5);
	font-size: 2em;
	padding: 10px;
}

#joinRoom {
	background: linear-gradient(45deg, #ffff39, #5bff5b, #609fff);
}

#uploadSaveButton {
	background: linear-gradient(45deg, #ffe304, #ffcb00, #ffafa0);
}

#uploadSaveButton, #offlineSinglePlayer {
	margin-top: 5px;
}

#roomManager #createRoom {
	background: linear-gradient(45deg, #FF6600, #FF77CC, #7777FF);
}

#offlineSinglePlayer, #downloadSaveNowButton {
	background: linear-gradient(45deg, #ccadf8, #96a6ee, #8fc6f6);
}

#roomManager #singlePlayerGame {
	background: linear-gradient(45deg, #d18e5f, #dfd31d, #779fff);
}


#roomManager #copyrightNotice {
	text-align: center;
	width: 100vw;
	width: calc(var(--vw) * 100);
	color: #ffbd17;
}

#roomManager #inRoomContainer {
	min-height: 40vh;
	min-height: calc(var(--vh) * 40);
}

#roomManager #currentRoom {
	font-size: 2em;
	margin: 0;
}

#connectionStatus {
	font-size: 2em;
	width: fit-content;
	padding: 6px 15px;
	background: #ffc3c3;
	margin: auto;
	margin-top: 10px;
}

#connectionStatus.connected {
	background-color: #4de83a;
}

#roomManager #playerCount {
	font-size: 1.5em;
}

#roomManager #playerView {
	margin-bottom: 5px;
}

#roomManager .playerViewRow {
	text-align: left;
	padding-left: 2vw;
	padding-left: calc(var(--vw) * 2);
	padding-right: 2vw;
	padding-right: calc(var(--vw) * 2);
	border: 2px solid #00000044;
}

#roomManager .playerViewNameSpan {
	font-size: 2em;
	width: 40%;
	display: inline-block;
}

#roomManager .editableName.playerViewNameSpan:hover {
	margin-left: -4px;
	border: 2px solid #0097f3;
}

#roomManager .editableName.playerViewNameSpan::after {
	content: url(../assets/edit.svg);
	display: inline-block;
    width: 0.6em;
	margin-left: 8px;
}

#roomManager .playerViewVoiceChoice {
	font-size: 1em;
	width: 30%;
	display: inline-block;
	text-align: center;
}

#roomManager .playerViewVoiceChoice select {
	font-size: 1em;
	max-width: 100%;
}

#roomManager .playerViewIdSpan {
	font-size: 1em;
}

#roomManager .playerViewCard {
	width: 30%;
	display: inline-block;
	font-size: 1.5em;
	text-align: center;
}

#roomManager #roomSaveIdElem {
	text-align: center;
}

#roomManager .playerViewKickButton {
	background: linear-gradient(45deg, #f23f3f,#eeb972);
	border-radius: 250000px;
	padding: 5px 20px 5px 20px;
	font-size: 1em;
	cursor: pointer;
}

#startGameButton, #addBotButton, #leaveRoomButton, #closeRoomButton {
	font-size: 1.5em;
	border-radius: 250000px;
	padding: 10px;
}

#roomManager #startGameButton, #roomManager #addBotButton, #deleteSaveNowButton  {
	background: linear-gradient(45deg, #FF6600, #FF77CC, #7777FF);
}

#deleteSaveNowButton, #resumeSaveNowButton, #downloadSaveNowButton {
	border-radius: 250000px;
	font-size: 2em;
	margin: 0;
	margin-top: 1vh;
	margin-top: calc(var(--vh) * 1);
	margin-bottom: 1.5vh;
	margin-bottom: calc(var(--vh) * 1.5);
	border: 2px solid black;
	padding: 5px 20px 5px 20px;
}

#closeRoomButton {
	background: linear-gradient(45deg, orange, yellow, lightgreen);
}

#leaveRoomButton, #resumeSaveNowButton {
	background: linear-gradient(45deg, #ffff39, #5bff5b, #609fff);
}

#tutorialLink {
	font-size: 2em;
	line-height: 60px;
}

#documentationLink {
	font-size: 1.3em;
	line-height: 30px;
}

#inviteYourFriendsElem {
	background-color: #2fcb29;
	border-radius: 10px;
	margin-top: 10px;
	padding: 10px;
	padding-top: 0;
	overflow: hidden;
}

#inviteYourFriendsDiv {
	display: inline-block;
	margin-top: 0.5em;
	vertical-align: top;
}

#QRImageElement {
	margin-left: 20px;
	margin-top: 1em;
}

#joinRoomLinkElem {
	font-size: 1.5em;
	margin: 0;
}

#screenRotationAlert {
	font-size: 2.5em;
	background-color: white;
}

#externalAppStoresDiv * {
	height: 70px;
	max-width: 90%;
	margin: 16px;
	margin-right: 8px;
	margin-left: 8px;
}

#gameSettingsElem {
	background-color: #2fcb29;
	border-radius: 10px;
	padding: 10px;
	margin-top: 10px;
}

.guaranteedHandsTableContainer {
	max-height: 30vh;
	max-height: calc(var(--vh) * 30);
	overflow: scroll;
}

.guaranteedHandsTable {
	background-color: white;
	width: 100%;
	border-collapse: collapse;
}

.guaranteedHandsTable tr:first-child {
	background-color: #ffff74;
}

.guaranteedHandsTable tr td {
	text-align: left;
	border-top: 1px solid black;
	font-size: 1.5em;
	height: 2em;
	cursor: pointer;
}

.guaranteedHandsTable span {
	padding: 5px;
}

.guaranteedHandsTable tr td:first-child {
	padding-left: 10px;
}

.guaranteedHands0 {
	background-color: lightblue;
}

.guaranteedHands1 {
	background-color: lightgreen;
}

.guaranteedHands2 {
	background-color: #f9dba3;
}

.saveRow {
	background-color: white;
}

#topHand {
	position: absolute;
	top: 0;
	left: 10.52vh;
	left: calc(var(--vh) * 10.52);
	max-height: 12vh;
	max-height: calc(var(--vh) * 12);
	width: calc(100vw - 21.04vh);
	width: calc(calc(var(--vw) * 100) - calc(var(--vh) * 21.04));
	text-align: center; /*Center tiles horizontally. */
	background-color: #5a3e32;
}

#leftHand {
	position: absolute;
	left: 0;
	top: 0;
	max-width: 10.52vh;
	max-width: calc(var(--vh) * 10.52);
	width: 10.52vh;
	width: calc(var(--vh) * 10.52);
	height: 100vh;
	height: calc(var(--vh) * 100);
	background-color: #4c3329;
	padding-left: calc(1px + 100vw * var(--shiftPercentageLeft) * var(--counterTranslationScaling));
	padding-left: calc(1px + calc(var(--vw) * 100) * var(--shiftPercentageLeft) * var(--counterTranslationScaling));
	transform: translateX(calc(-100vw * var(--shiftPercentageLeft) * var(--counterTranslationScaling)));
	transform: translateX(calc(calc(var(--vw) * -100) * var(--shiftPercentageLeft) * var(--counterTranslationScaling)));
}

#rightHand {
	position: absolute;
	right: 0;
	top: 0;
	max-width:10.52vh;
	max-width:calc(var(--vh) * 10.52);
	width: 10.52vh;
	width: calc(var(--vh) * 10.52);
	height: 100vh;
	height: calc(var(--vh) * 100);
	background-color: #4c3329;
	transform: translateX(calc(100vw * var(--shiftPercentageRight) * var(--counterTranslationScaling)));
	transform: translateX(calc(calc(var(--vw) * 100) * var(--shiftPercentageRight) * var(--counterTranslationScaling)));
	padding-right: calc(1px + 100vw * var(--shiftPercentageRight) * var(--counterTranslationScaling));
	padding-right: calc(1px + calc(var(--vw) * 100) * var(--shiftPercentageRight) * var(--counterTranslationScaling));
}

@keyframes goToCorrectLocation {
  0% {
	  transform: translateY(-55vh);
	  transform: translateY(calc(var(--vh) * -55));
	}
  100% {
	  transform: none;
  }
}

.animateTile {
	animation: goToCorrectLocation 6s cubic-bezier(0.05, 1.14, 0, 0.95) forwards;
}

/*We would use bottom, however Safari treats bottom as the bottom of the viewport, and Safari has the viewport != visible area bug.
This means that something using bottom is off the page - hence we must use top. */
#userHand, #userHandExposed, #tilePlacemat {
	position: absolute;
	/*bottom: 0;*/
	top: 88vh;
	top: calc(var(--vh) * 88);
	left: 10.52vh;
	left: calc(var(--vh) * 10.52);
	height:12vh;
	height:calc(var(--vh) * 12);
	max-height: 12vh;
	max-height: calc(var(--vh) * 12);
	width: calc(100vw - 21.04vh);
	width: calc(calc(var(--vw) * 100) - calc(var(--vh) * 21.04));
	text-align: center; /*Center tiles horizontally. */
	background-color: #7d4b37;
}

#gameBoard #userHand {
	z-index: 1; /*Allows tiles in userHand to show up above tiles in handForExposed - needed for indicating last tile drawn. */
}

#gameBoard #userHandExposed {
	/*bottom: 12vh;*/
	/*bottom: calc(var(--vh) * 12);*/
	top: 76vh;
	top: calc(var(--vh) * 76);
	background-color: #a04622;
	text-align: left;
}

#gameBoard #tilePlacemat {
	/*bottom: 24vh;*/
	/*bottom: calc(var(--vh) * 24);*/
	top: 64vh;
	top: calc(var(--vh) * 64);
	background-color: #FFFFFF00;
}


/*Containers used on left and right hands for vertical alignment. */
#gameBoard #rightHandContainer {
	position: relative;
	top: 50%;
	transform: translateY(-50%);
}

#gameBoard #leftHandContainer {
	position: relative;
	top: 50%;
	transform: translateY(-50%);
}

/*TODO: If tiles aren't at max size and height is much greater than width, the tiles run into each other, as the negative bottoms are height based, but tiles are width bound. */
#gameBoard #topHand img {
	max-width: calc(calc(100vw - 19.04vh) / 14); /*Raised from 14 in order to allow for more tiles to fit. */
	max-width: calc(calc(calc(var(--vw) * 100) - calc(var(--vh) * 19.04)) / 14); /*Raised from 14 in order to allow for more tiles to fit. */
	max-height: 12vh;
	max-height: calc(var(--vh) * 12);
	/*transform: rotate(180deg);*/ /*Rotate tiles 180 degrees away from the viewer (they would be across from this person)*/
}

/*Note: Currently leftHand and rightHand tiles are facing 180 degrees away from where they would in a real game, however this probably makes it easier to read the tiles. */
#leftHand img {
	transform: rotate(270deg) translate(-1vh, 0px);
	transform: rotate(270deg) translate(calc(var(--vh) * -1), 0px);
	padding-left: 2.38vh; /*Otherwise it is transformed partially off the screen. */
	padding-left: calc(var(--vh) * 2.38); /*Otherwise it is transformed partially off the screen. */
}

#rightHand img {
	transform: rotate(90deg) translate(-1.25vh, 0px);
	transform: rotate(90deg) translate(calc(var(--vh) * -1.25), 0px);
	padding-left: 2.77vh; /*Stop from travling off hand to left. */
	padding-left: calc(var(--vh) * 2.77); /*Stop from travling off hand to left. */
}

#leftHand img, #rightHand img {
	max-width: 9.52vh;
	max-width: calc(var(--vh) * 9.52);
	max-height: 10.5vh;
	max-height: calc(var(--vh) * 10.5);
}

#leftHand img:not(:first-child), #rightHand img:not(:first-child) {
	margin-top: calc(-3.4vh - 0.6vh * var(--negativeMarginMultiplier)); /*It seems like the elements height does not reflect the fact that it has been transformed. Negative margin to remove some of this. */
	margin-top: calc(calc(var(--vh) * -3.4) - calc(var(--vh) * 0.6) * var(--negativeMarginMultiplier)); /*It seems like the elements height does not reflect the fact that it has been transformed. Negative margin to remove some of this. */
}

#userHand img, #userHandExposed img, #tilePlacemat img {
	max-width: calc(calc(100vw - 19.04vh) / 14);
	max-width: calc(calc(calc(var(--vw) * 100) - calc(var(--vh) * 19.04)) / 14);
	max-height: 12vh;
	max-height: calc(var(--vh) * 12);
}

#userHand img:not(:first-child), #userHand img:not(:first-child),
#userHandExposed img:not(:first-child), #topHand img:not(:first-child) {
	margin-left: calc(calc(100vw - 19.04vh) / 17 / -10 * var(--negativeMarginMultiplier)); /*Negative margin of 10%. Allows even more tiles to fit. */
	margin-left: calc(calc(calc(var(--vw) * 100) - calc(var(--vh) * 19.04)) / 17 / -10 * var(--negativeMarginMultiplier)); /*Negative margin of 10%. Allows even more tiles to fit. */
}

/*Note: These animations are eating up a very significant amount of CPU/GPU power. We may want to stop using them. */
@keyframes handTurnPulse {
  0% {
    filter: brightness(1);
  }
  25% {
    filter: brightness(0.7);
  }
  50% {
	  filter: brightness(1);
  }
  75% {
	  filter: brightness(1.3);
  }
  100% {
	filter: brightness(1);
  }
}

.brightnessPulse {
	animation: handTurnPulse 3s linear infinite;
}

#tilePlacemat img {
	margin-right: 20px;
	border-radius: calc((100vw - 19.04vh) / 14 / 12); /*border radius 1/12th the width of a tile. TODO: This should be analyzed later to make sure it works right*/
	border-radius: calc((calc(var(--vw) * 100) - calc(var(--vh) * 19.04)) / 14 / 12); /*border radius 1/12th the width of a tile. TODO: This should be analyzed later to make sure it works right*/
}

@keyframes discardSlotPulse {
  0% {
    background-color: #3D003F99;
  }
  50% {
    background-color: #FF4136B0;
  }
  100% {
	background-color: #3D003F99;
  }
}

#tilePlacemat img.pending {
	animation: discardSlotPulse 3s infinite;
}

#compass {
	position: absolute;
	right: calc(9.52vh + 4vmin);
	right: calc(calc(var(--vh) * 9.52) + 4vmin);
	top: calc(12vh + 3vmin);
	top: calc(calc(var(--vh) * 12) + 3vmin);
	width: 12vw;
	width: calc(var(--vw) * 12);
	height: 12vw;
	height: calc(var(--vw) * 12);
	max-width: 12vh;
	max-width: calc(var(--vh) * 12);
	max-height: 12vh;
	max-height: calc(var(--vh) * 12);
}

#bottomNametag, #leftNametag, #rightNametag, #topNametag {
	position: absolute;
	margin: 0;
	text-align: center;
	font-size: 2.2vmin;
	min-width: 12vmin;
}

#bottomNametag {
	right: calc(9.52vh + 4vmin);
	right: calc(calc(var(--vh) * 9.52) + 4vmin);
	top: calc(12vh + 12vmin + 3vmin);
	top: calc(calc(var(--vh) * 12) + 12vmin + 3vmin);
}

#leftNametag {
	transform: rotate(270deg);
	right: calc(9.52vh + 12vmin);
	right: calc(calc(var(--vh) * 9.52) + 12vmin);
	top: calc(12vh + 7vmin);
	top: calc(calc(var(--vh) * 12) + 7vmin);
}

#topNametag {
	right: calc(9.52vh + 4vmin);
	right: calc(calc(var(--vh) * 9.52) + 4vmin);
	top: 12vh;
	top: calc(var(--vh) * 12);
}

#rightNametag {
	transform: rotate(90deg);
	right: calc(9.52vh - 3.5vmin);
	right: calc(calc(var(--vh) * 9.52) - 3.5vmin);
	top: calc(12vh + 7vmin);
	top: calc(calc(var(--vh) * 12) + 7vmin);
}

#wallAndDiscardContainer {
	position: absolute;
	left: calc(9.52vh + 3vw);
	left: calc(calc(var(--vh) * 9.52) + calc(var(--vw) * 3));
	top: calc(12vh + 1vh);
	top: calc(calc(var(--vh) * 12) + calc(var(--vh) * 1));
	max-width: 56vw;
	max-width: calc(var(--vw) * 56);
}

#wall * {
	max-width: calc(50vw / 31);
	max-width: calc(calc(var(--vw) * 50) / 31);
	max-height: 3.33vh;
	max-height: calc(var(--vh) * 3.33);
}

#wall p {
	display: inline-block;
	margin: 0;
	font-size: 2.5vh;
	font-size: calc(var(--vh) * 2.5);
	vertical-align: top;
	width: calc(50vw / 31);
	width: calc(calc(var(--vw) * 50) / 31);
	text-align: center;
}

#discardPile {
	margin-top: 1vh;
	margin-top: calc(var(--vh) * 1);
}

#discardPile * {
	max-width: calc(60vw / 23);
	max-width: calc(calc(var(--vw) * 60) / 23);
	max-height: 7.5vh;
	max-height: calc(var(--vh) * 7.5);
}

/*Since we have to use top instead of bottom due to viewport bugs, this can be floating above where it should be. */
#fullscreenControls {
	position: absolute;
	right: calc(10.52vh + 1vw);
	right: calc(calc(var(--vh) * 10.52) + calc(var(--vw) * 1));
	top: calc(71vh - 1vh);
	top: calc(calc(var(--vh) * 71) - calc(var(--vh) * 1));
	max-height: 5vh;
	max-height: calc(var(--vh) * 5);
	max-width: 5vw;
	max-width: calc(var(--vw) * 5);
	z-index: 1;
}

#syncButton {
	position: absolute;
	right: calc(10.52vh + 1vw);
	right: calc(calc(var(--vh) * 10.52) + calc(var(--vw) * 1));
	top: 64vh;
	top: calc(var(--vh) * 64);
	max-height: 5vh;
	max-height: calc(var(--vh) * 5);
	max-width: 5vw;
	max-width: calc(var(--vw) * 5);
	z-index: 1;
}

#revertStateButton {
	position: absolute;
	left: calc(9.52vh + 2vw);
	left: calc(calc(var(--vh) * 9.52) + calc(var(--vw) * 2));
	top: 64vh;
	top: calc(var(--vh) * 64);
	width: 10vw;
	width: calc(var(--vw) * 10);
	height: 5vh;
	height: calc(var(--vh) * 5);
	border-radius: 50vh;
	border-radius: calc(var(--vh) * 50);
	font-size: 2.1vh;
	font-size: calc(var(--vh) * 2.1);
}

#gameBoard.chinese #revertStateButton {
	left: initial;
	right: calc(9.52vh + 8vw);
	right: calc(calc(var(--vh) * 9.52) + calc(var(--vw) * 8));
	top: 70vh;
	top: calc(var(--vh) * 70);
}

/*Make these from the left*/
#gameBoard.chinese #proceedButton {
	left: calc(9.52vh + 2vw);
	left: calc(calc(var(--vh) * 9.52) + calc(var(--vw) * 2));
	width: calc(73vw - 19.04vh);
	width: calc(calc(var(--vw) * 73) - calc(var(--vh) * 19.04));
}

#proceedButton {
	position: absolute;
	left: calc(9.52vh + 13vw);
	left: calc(calc(var(--vh) * 9.52) + calc(var(--vw) * 13));
	top: 57vh;
	top: calc(var(--vh) * 57);
	width: calc(62vw - 19.04vh);
	width: calc(calc(var(--vw) * 62) - calc(var(--vh) * 19.04));
	height: 5vh;
	height: calc(var(--vh) * 5);
	border-radius: 50vh;
	border-radius: calc(var(--vh) * 50);
	font-size: 2.1vh;
	font-size: calc(var(--vh) * 2.1);
}

#proceedButton.shrinkForHintButton {
	width: calc(45vw - 19.04vh);
	width: calc(calc(var(--vw) * 45) - calc(var(--vh) * 19.04));
}

#gameBoard.chinese #hintButton {
	display: none;
}

.suggestedHandsTable {
	background: #fdfdfd;
	color: black;
	display: inline-block;
	width: 100%;
	max-height: 40vh;
	max-height: calc(var(--vh) * 40);
	overflow: scroll;
}

.suggestedHandsTable img {
	width: calc(100% / 14);
	max-width: 64px; /*Don't let it get too huge. */
	padding-bottom: 10px;
	border-bottom: 1px solid black;
}

#hintButton {
	position: absolute;
	right: calc(9.52vh + 25.5vw);
	right: calc(calc(var(--vh) * 9.52) + calc(var(--vw) * 25.5));
	top: 57vh;
	top: calc(var(--vh) * 57);
	width: 15.5vw;
	width: calc(var(--vw) * 15.5);
	height: 5vh;
	height: calc(var(--vh) * 5);
	border-radius: 50vh;
	border-radius: calc(var(--vh) * 50);
	font-size: 2.1vh;
	font-size: calc(var(--vh) * 2.1);
}

@keyframes animateScale {
  0% {
    transform: scaleY(1) scaleX(1);
  }
  50% {
	transform: scaleY(1.2) scaleX(0.9);
  }
  100% {
	transform: scaleY(1) scaleX(1);
  }
}

.scaleAnimation {
	animation: animateScale 1.5s linear 6s infinite;
}

#endGameButton {
	position: absolute;
	left: calc(9.52vh + 2vw);
	left: calc(calc(var(--vh) * 9.52) + calc(var(--vw) * 2));
	top: 70vh;
	top: calc(var(--vh) * 70);
	width: 10vw;
	width: calc(var(--vw) * 10);
	height: 5vh;
	height: calc(var(--vh) * 5);
	border-radius: 50vh;
	border-radius: calc(var(--vh) * 50);
	font-size: 2.1vh;
	font-size: calc(var(--vh) * 2.1);
}

#goMahjongButton {
	position: absolute;
	right: calc(9.52vh + 8vw);
	right: calc(calc(var(--vh) * 9.52) + calc(var(--vw) * 8));
	top: 70vh;
	top: calc(var(--vh) * 70);
	width: 10vw;
	width: calc(var(--vw) * 10);
	height: 5vh;
	height: calc(var(--vh) * 5);
	border-radius: 50vh;
	border-radius: calc(var(--vh) * 50);
	font-size: 2.1vh;
	font-size: calc(var(--vh) * 2.1);
}

#gameBoard.chinese #goMahjongButton {
	top: 64vh;
	top: calc(var(--vh) * 64);
}

#proceedButton:disabled {
	opacity: 0.5;
	cursor: not-allowed;
}

#newGameNoLobbyButton {
	position: absolute;
	left: calc(9.52vh + 2vw);
	left: calc(calc(var(--vh) * 9.52) + calc(var(--vw) * 2));
	top: 58vh;
	top: calc(var(--vh) * 58);
	width: 10vw;
	width: calc(var(--vw) * 10);
	height: 5vh;
	height: calc(var(--vh) * 5);
	border-radius: 50vh;
	border-radius: calc(var(--vh) * 50);
	font-size: 2.1vh;
	font-size: calc(var(--vh) * 2.1);
}

#gameBoard.chinese #newGameNoLobbyButton {
	top: 64vh;
	top: calc(var(--vh) * 64);
}

#swapJokerButton {
	position: absolute;
	right: calc(9.52vh + 8vw);
	right: calc(calc(var(--vh) * 9.52) + calc(var(--vw) * 8));
	top: 64vh;
	top: calc(var(--vh) * 64);
	width: 10vw;
	width: calc(var(--vw) * 10);
	height: 5vh;
	height: calc(var(--vh) * 5);
	border-radius: 50vh;
	border-radius: calc(var(--vh) * 50);
	font-size: 2.1vh;
	font-size: calc(var(--vh) * 2.1);
}

#gameBoard.chinese #swapJokerButton {
	display: none;
}

#instructionBubble {
	position: absolute;
	right: calc(9.52vh + 10px + 1vw);
	right: calc(calc(var(--vh) * 9.52) + 10px + calc(var(--vw) * 1));
	top: 35vh;
	top: calc(var(--vh) * 35);
	background-color: #fdffcb;
	font-size: calc(1.1vmin + 0.75vmax); /*Seems to work decently, though not perfect. TODO: Might need to transpile this too. */
	padding: 10px;
	border-radius: 10px;
	width: 20vw;
	width: calc(var(--vw) * 20);
	height: 21vh;
	height: calc(var(--vh) * 21);
	display: flex;
	align-items: center;
	text-align: center;
	justify-content: center;
}

.swapJokerOptionMenuButton {
	font-size: inherit;
	width: 60%;
	margin-left: 20%;
	display: block;
}

.historyMenuButtonContainer {
	max-height: 35vh;
	max-height: calc(var(--vh) * 35);
	overflow: scroll;
}

.historyMenuButtonContainer button {
	font-size: inherit;
	width: 100%;
}

#gameBoard {
	position: absolute;
	width: 100vw;
	width: calc(var(--vw) * 100);
	height: 100vh;
	height: calc(var(--vh) * 100);
	background-color: #c3f6c3;
}

#errorPopupCover {
	position: fixed;
	bottom: 0;
	width: 100vw;
	width: calc(var(--vw) * 100);
	height: 100vh;
	height: calc(var(--vh) * 100);
	background-color: #00000040;
	z-index: 100;
	display: flex;
	align-items: center;
	justify-content: center;
	padding-left: calc(100vw * var(--shiftPercentageLeft) * var(--counterTranslationScaling));
	padding-left: calc(calc(var(--vw) * 100) * var(--shiftPercentageLeft) * var(--counterTranslationScaling));
	padding-right: calc(100vw * var(--shiftPercentageRight) * var(--counterTranslationScaling));
	padding-right: calc(calc(var(--vw) * 100) * var(--shiftPercentageRight) * var(--counterTranslationScaling));
	transform: translateX(calc(-100vw * var(--shiftPercentageLeft) * var(--counterTranslationScaling)));
	transform: translateX(calc(calc(var(--vw) * -100) * var(--shiftPercentageLeft) * var(--counterTranslationScaling)));
}

#errorPopup {
	min-height: 25vh;
	min-height: calc(var(--vh) * 25);
	max-width: 72vw;
	max-width: calc(var(--vw) * 72);
	background-color: #368a36;
	border: 5px solid #ffbd17;
	border-radius: 1vh;
	border-radius: calc(var(--vh) * 1);
	text-align: center;
	padding-left: 8px;
	padding-right: 8px;
}

#errorPopup #errorText {
	font-size: 3.2em;
	color: #ffe100;
	margin-block-start: 2.25vh;
	margin-block-start: calc(var(--vh) * 2.25);
	margin-block-end: 0;
}

#errorPopup #messageText {
	font-size: 2em;
	color: white;
	margin-bottom: 0;
	margin-block-start: 0.5em;
}

#errorPopup #dismissButton {
	border-radius: 250000px;
	font-size: 2em;
	margin-top: 1vh;
	margin-top: calc(var(--vh) * 1);
	margin-bottom: 1.5vh;
	margin-bottom: calc(var(--vh) * 1.5);
	background: linear-gradient(45deg, orange, yellow, lightgreen);
	border: 2px solid black;
	padding: 5px 20px 5px 20px;
}


#notificationBar {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	z-index: 99; /*Below errorPopupCover*/
	background-color: #fafa70;
	text-align: center;
	font-size: 1em;
	min-height: 50px;
}

@keyframes fadeInAndOut {
  0% {
	  opacity: 0;
  }
  12% {
	  opacity: 1;
  }
  18% {
	  opacity: 1;
  }
  100% {
	  opacity: 0;
  }
}

.blocklessAlertCover {
	position: absolute;
	width: 100vw;
	width: calc(var(--vw) * 100);
	height: 100vh;
	height: calc(var(--vh) * 100);
	background-image: radial-gradient(transparent, #00000025, #00000040);
	z-index: 98;
	opacity: 0;
	pointer-events: none;
	padding-left: calc(100vw * var(--shiftPercentageLeft) * var(--counterTranslationScaling));
	padding-left: calc(calc(var(--vw) * 100) * var(--shiftPercentageLeft) * var(--counterTranslationScaling));
	padding-right: calc(100vw * var(--shiftPercentageRight) * var(--counterTranslationScaling));
	padding-right: calc(calc(var(--vw) * 100) * var(--shiftPercentageRight) * var(--counterTranslationScaling));
	transform: translateX(calc(-100vw * var(--shiftPercentageLeft) * var(--counterTranslationScaling)));
	transform: translateX(calc(calc(var(--vw) * -100) * var(--shiftPercentageLeft) * var(--counterTranslationScaling)));
}

.blocklessAlertCover p {
	text-align: center;
	font-size: 3vw;
	font-size: calc(var(--vw) * 3);
	margin:0;
	height: 100vh;
	height: calc(var(--vh) * 100);
	line-height: 100vh;
	line-height: calc(var(--vh) * 100);
}





:root {
	/*
	While viewport relative units work fine on desktop, some mobile browsers will not show the entire viewport, due to the url bar.
	See https://nicolas-hoizey.com/articles/2015/02/18/viewport-height-is-taller-than-the-visible-part-of-the-document-in-some-mobile-browsers/

	To counteract this, we will use a CSS variable that will be dynamically changed by JavaScript.
	In order to convert vh to use the relative variable, use the following two find and replace regexp. (note: make sure that every single declaration ends in a semicolon)

	Find and replace (-)?([\d.]+)vh with calc(var(--vh) * $1$2)
	*/
	--vh: 1vh;
	--vw: 1vh;

	/*Complex math doesn't work in CSS, as one of two sides in division and multiplication
	must be a number - dividing 100vw by 500px to get a ratio is not allowed
	must be a number - dividing calc(var(--vw) * 100) by 500px to get a ratio is not allowed

	Therefore, we need to make these enviroment variables accessible to JavaScript*/
	--sat: env(safe-area-inset-top);
	--sar: env(safe-area-inset-right);
	--sab: env(safe-area-inset-bottom);
	--sal: env(safe-area-inset-left);

	--negativeMarginMultiplier: 1; /*This is adjusted for tile grouping*/
	--counterTranslationScaling: calc(1/(1 - var(--shiftPercentageRight) - var(--shiftPercentageLeft))); /*Translate is processed AFTER scale, so we must multiply the translation to counteract*/
}

html, body {
	width: 100vw;
	width: calc(var(--vw) * 100);
	height: 100vh;
	height: calc(var(--vh) * 100);
	margin: 0;
	padding: 0;
	background-color: black;
}

body {
	/*The notch isn't very large, so when we have a notch, we'll scale the entire screen. */
	/*We need to translate slightly further, as the scale reduces the size from both sides evenly. */
	/*Translate is processed AFTER scale, so we must multiply the translation to counteract*/
	transform: scaleX(calc(1 - var(--shiftPercentageRight) - var(--shiftPercentageLeft)))
		translateX(calc(50vw * (var(--shiftPercentageLeft) - var(--shiftPercentageRight)) * var(--counterTranslationScaling)));
		translateX(calc(calc(var(--vw) * 50) * (var(--shiftPercentageLeft) - var(--shiftPercentageRight)) * var(--counterTranslationScaling)));
}
